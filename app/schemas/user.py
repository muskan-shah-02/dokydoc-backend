from pydantic import BaseModel, EmailStr
from typing import Optional

# ===================================================================
# Schemas for User Data
# Pydantic models (schemas) define the data shape for your API.
# They handle validation, serialization, and documentation automatically.
# ===================================================================


# --- Base Schema ---
# Shared properties that are common to other schemas
class UserBase(BaseModel):
    email: EmailStr  # Ensures the email format is valid
    full_name: Optional[str] = None
    is_active: bool = True


# --- Create Schema ---
# Properties required when creating a new user. Inherits from UserBase.
class UserCreate(UserBase):
    password: str


# --- Update Schema ---
# Properties that can be updated. All are optional.
class UserUpdate(BaseModel):
    email: Optional[EmailStr] = None
    full_name: Optional[str] = None
    password: Optional[str] = None


# --- Schema for Database Models ---
# Properties that are present in the database model but might not be in the API.
# It includes the 'id' which is generated by the database.
class UserInDB(UserBase):
    id: int
    hashed_password: str

    class Config:
        from_attributes = True # Formerly orm_mode = True


# --- Schema for API Responses ---
# Properties to return to the client. It should never include the password.
class User(UserBase):
    id: int

    class Config:
        from_attributes = True # Formerly orm_mode = True

